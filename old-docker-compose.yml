version: '2.1'
services:
#  jobmanager:
#    image: pyflink/playgrounds:1.13.0-rc2
#    volumes:
#      - ./examples:/opt/examples
##      - ./tmp:/tmp/examples
#    hostname: "jobmanager"
#    expose:
#      - "6123"
#    ports:
#      - "8081:8081"
#    command: jobmanager
#    environment:
#      - JOB_MANAGER_RPC_ADDRESS=jobmanager
#  taskmanager:
#    image: pyflink/playgrounds:1.13.0-rc2
#    volumes:
#      - ./examples:/opt/examples
##      - ./tmp:/tmp/examples
#    expose:
#      - "6121"
#      - "6122"
#    depends_on:
#      - jobmanager
#    command: taskmanager
#    links:
#      - jobmanager:jobmanager
#    environment:
#      - JOB_MANAGER_RPC_ADDRESS=jobmanager
#      - TASK_MANAGER_NUMBER_OF_TASK_SLOTS=20
  zookeeper:
    image: wurstmeister/zookeeper:3.4.6
    ports:
      - "2181:2181"
  kafka:
    image: wurstmeister/kafka:2.12-2.2.1
    ports:
      - "9092"
    depends_on:
      - zookeeper
    environment:
      HOSTNAME_COMMAND: "route -n | awk '/UG[ \t]/{print $$2}'"
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "Rides:1:1, Fares:1:1, DriverChanges:1:1, TempResults:1:1, picks:1:1"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
#  kafka-data-producer:
#    image: fhueske/flink-sql-training:1-FLINK-1.9-scala_2.11
#    command: "java -classpath /opt/data/data-producer.jar com.ververica.sql_training.data_producer.TaxiRecordProducer --input file /opt/data --output kafka kafka:9092 --speedup 10.0"
#    depends_on:
#      - kafka
#      - jobmanager
#    environment:
#      FLINK_JOBMANAGER_HOST: jobmanager
#      ZOOKEEPER_CONNECT: zookeeper
#      KAFKA_BOOTSTRAP: kafka

  cli-tools:
    image: confluentinc/cp-kafka:6.1.1
    container_name: cli-tools
    entrypoint: "sleep infinity"
    restart: always

  flink-python:
    build:
      context: .
    volumes:
      - ./main.py:/opt/flink/main.py
    command: bash launch.sh

  consumer:
    build:
      context: .
    volumes:
      - ./consumer.py:/opt/flink/consumer.py
    command: python consumer.py


  postgres:
    image: postgres:latest
    hostname: postgres
    container_name: postgres
    networks:
      - default
    restart: always
    user: postgres
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5432:5432"
    volumes:
      - db:/var/lib/postgresql/data
    command: [
      "postgres",
      "-c", "log_statement=all",
      "-c", "fsync=off",
      "-c", "synchronous_commit=off",
      "-c", "full_page_writes=off"
    ]
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 30s
      timeout: 10s
      retries: 5

  python-consumer:
    build:
      context: .
    volumes:
      - ./consumer.py:/opt/flink/consumer.py
    command: python consumer.py

volumes:
  db:
    driver: local
